name: Image gui-base_mdcx_builtin CI

on:
  push:
    branches:
      - none

  workflow_run:
    workflows: [Image build-mdcx CI]
    types: [completed]
    branches: [main]

  workflow_dispatch:
    inputs:
      stage:
        description: Stage
        type: choice
        default: dev
        options:
          - dev
          - prod
      baseImage:
        description: Tag of base image `gui-base`
        type: choice
        default: 'latest'
        options:
          - 'ubuntu-22.04'
          - 'latest'
      binTag:
        description: Tag of app bin image
        default: 'latest'

env:
  IMAGE_BASE: gui-base
  IMAGE_KEY: gui-base_mdcx-builtin

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Prepare build info
        id: buildInfo
        run: |
          STAGE=${{ github.event.inputs.stage }}
          if [[ "${{ github.event_name }}" == "workflow_run" && "${{ github.ref_name }}" == "main" ]]; then
            STAGE=prod
          fi
          echo "STAGE=$STAGE" >> $GITHUB_OUTPUT

          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            sleep 10
          fi
      -
        name: Prepare App info
        id: appInfo
        run: |
          APP_IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/build-mdcx:${{ github.event.inputs.binTag }}"
          APP_VERSION=$(docker run --rm $APP_IMAGE cat /app-version)
          if [[ -z "$APP_VERSION" ]]; then
            echo "❌ Failed to get app version from app bin image!"
            exit 1
          fi

          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_OUTPUT
      -
        name: Prepare Version Values
        uses: cardinalby/export-env-action@v2
        id: versions
        with:
          envFile: '.env.versions'
          export: 'false'
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - 
        name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - 
        name: Produce docker image tags and other information
        id: imageInfo
        run: |
          if [[ "${{ steps.buildInfo.outputs.STAGE }}" == "dev" ]]; then
            echo "latest=latest-dev" >> $GITHUB_OUTPUT
            echo "version=${{ steps.appInfo.outputs.APP_VERSION }}-dev" >> $GITHUB_OUTPUT
          else
            echo "latest=latest" >> $GITHUB_OUTPUT
            echo "version=${{ steps.appInfo.outputs.APP_VERSION }}" >> $GITHUB_OUTPUT
          fi
      - 
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: ${{ env.IMAGE_BASE }}/Dockerfile.${{ env.IMAGE_KEY }}
          build-args: |
            APT_SOURCE_HOST=
            BASE_IMAGE_TAG=${{ github.event.inputs.baseImage }}
            APP_VERSION=${{ steps.appInfo.outputs.APP_VERSION }}
            MDCX_BIN_IMAGE_TAG=${{ github.event.inputs.binTag }}
          platforms: |
            linux/amd64
            linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_KEY }}:${{ steps.imageInfo.outputs.latest }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_KEY }}:${{ steps.imageInfo.outputs.version }}